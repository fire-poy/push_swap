/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mpons <marvin@42lausanne.ch>               +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/01/13 16:13:01 by mpons             #+#    #+#             */
/*   Updated: 2022/01/21 17:27:38 by mpons            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../inc/push_swap.h"
/*
  
Step 1 : Parsing, put numbers in the stack A if no errors are detected

Step 2 : Check if the numbers in A are all sorted. If so, end the program without printing anything. It’d be preferable to write a function A_is_sorted()

Step 3 : If the size of A ≤ 5, call function sort_small_stack(). Else, call function sort_big_stack()

*/
t_stack	*init_stack()
{
	t_stack *stk;

	stk = malloc(sizeof(t_stack));
	stk->top = NULL;
	stk->bot = NULL;
	return (stk);
}

/*	enleve les possibles tabulations
 *	vois le signe
 *	check que soit un digit
 *	check value dehors range de entiers
 */
int ft_check_and_atoi(const char *str)
{
    int i;
    int sign;
    long value;

    value = 0;
    sign = 1;
    i = 0;
    while (str[i] == ' ' || (str[i] >= '\t' && str[i] <= '\r'))
        i++;
    if (str[i] == '-' || str[i] == '+')
    {
        if (str[i++] == '-')
            sign *= -1;
    }
    while (str[i])
    {
		if (ft_isdigit(str[i]) == 0)
		{
			err_m("some arguments aren’t integers");
		}
        value *= 10;
        value += str[i] - '0';
		if (value >= MAX_INT || value <= MIN_INT)
			err_m("some arguments are out of range of integers");
        i++;
    }
    return (value * sign);
}

/*
 * il faut creer les node de facon dinamique
 * sinon il faudrait avoir 93493 variable statique t_node
 */
t_node	*ft_create_node(char *str)
{
	t_node *adr;//a cette adresse

	adr = malloc(sizeof(t_node));//on malloc le space
	if (!adr)
		return (NULL);
	adr->value = ft_check_and_atoi(str);
	adr->prev = NULL;
	adr->next = NULL;
	return (adr);
}

t_node	*ft_add_stack(t_stack *a, char *val)
{
	t_node *new_n;

	new_n  = ft_create_node(val);
	a->size++;
	if (a->top == NULL)
		return (new_n);
	else
	{
		a->top->prev = new_n;
		new_n->next = a->top;
		return (new_n);
	}
}
/*
 * split les argument si il'y a un space c'est-a-dire c'est entre guillomets
 * cree les nodes et les mets sur la stack
 */
void	check_arg(int ac, char **av, t_stack *a)
{
	int	i;
	int	j;
	char **arg;

	i = ac;
	while (av[i--])
	{
		if (ft_strchr(av[i], ' '))
		{
			arg = ft_split(av[i], ' ');
			j = -1;
			while (arg[++j])
			{
				a->top = ft_add_stack(a, arg[j]);
				if (a->top == NULL)
				err_m("error node creation");
			}
			free (arg);
		}
		else
		{
			a->top = ft_add_stack(a, av[i]);
			if (a->top == NULL)
			err_m("error node creation");
		}
	}
}

void	print_stack(t_node *top)
{
	while (top->next)
	{
		printf("node = %d\n", top->value);
		top = top->next;
	}
		printf("node = %d\n", top->value);
}

int	main(int ac, char **av)
{
	t_stack *a;//si on cree la strc en static on doit la mettre a null 
//	t_stack *b;//si on cree un pointeur en static on dit que cette pointeur va avoir telle tipe seulement

	if (ac > 1)
	{
		a = init_stack();
		check_arg(av, a);
		print_stack(a->top);
//		check_doubles();
	}
	return (0);
}

